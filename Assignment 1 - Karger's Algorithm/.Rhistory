to_vertex <- as.numeric(ends(g, random_edge)[[2]])
print("to vertex")
print(to_vertex)
edges_to_be_changed <- neighbors(g, as.character(to_vertex))
for (j in 1:length(edges_to_be_changed)) {
g <- g + edge(from_vertex, edges_to_be_changed[j])
}
g <- delete.vertices(g, as.character(to_vertex))
g <- simplify(g, remove.multiple = F, remove.loops = T)
plot(g)
# mapping <- seq(1, length(V(g)))
# mapping[to_vertex] <- mapping[from_vertex]
# g <- contract(g, mapping, vertex.attr.comb = "first")
# #g <- delete.vertices(g, which(degree(g) == 0))
# g <- delete.vertices(g, to_vertex)
# g <- simplify(g, remove.multiple = F, remove.loops = T)
# plot(g)
# print(g)
}
}
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut <- function(num_vertices = 4, num_edges = 6) {
g <- make_random_connected_graph(num_vertices, num_edges)
for(i in 1:(num_vertices - 2)) {
# Select a random edge.
random_edge <- E(g)[sample(1:length(E(g)), 1)]
from_vertex <- ends(g, random_edge)[[1]]
to_vertex <- ends(g, random_edge)[[2]]
print("to vertex")
print(to_vertex)
edges_to_be_changed <- as.character(neighbors(g, to_vertex))
for (j in 1:length(edges_to_be_changed)) {
g <- g + edge(from_vertex, edges_to_be_changed[j])
}
g <- delete.vertices(g, to_vertex)
g <- simplify(g, remove.multiple = F, remove.loops = T)
plot(g)
# mapping <- seq(1, length(V(g)))
# mapping[to_vertex] <- mapping[from_vertex]
# g <- contract(g, mapping, vertex.attr.comb = "first")
# #g <- delete.vertices(g, which(degree(g) == 0))
# g <- delete.vertices(g, to_vertex)
# g <- simplify(g, remove.multiple = F, remove.loops = T)
# plot(g)
# print(g)
}
}
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut <- function(num_vertices = 4, num_edges = 6) {
g <- make_random_connected_graph(num_vertices, num_edges)
for(i in 1:(num_vertices - 2)) {
# Select a random edge.
random_edge <- E(g)[sample(1:length(E(g)), 1)]
from_vertex <- as.numeric(ends(g, random_edge)[[1]])
to_vertex <- as.numeric(ends(g, random_edge)[[2]])
print("to vertex")
print(to_vertex)
edges_to_be_changed <- neighbors(g, as.character(to_vertex))
for (j in 1:length(edges_to_be_changed)) {
g <- g + edge(as.character(from_vertex), as.character(edges_to_be_changed[j]))
}
g <- delete.vertices(g, as.character(to_vertex))
g <- simplify(g, remove.multiple = F, remove.loops = T)
plot(g)
# mapping <- seq(1, length(V(g)))
# mapping[to_vertex] <- mapping[from_vertex]
# g <- contract(g, mapping, vertex.attr.comb = "first")
# #g <- delete.vertices(g, which(degree(g) == 0))
# g <- delete.vertices(g, to_vertex)
# g <- simplify(g, remove.multiple = F, remove.loops = T)
# plot(g)
# print(g)
}
}
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut <- function(num_vertices = 4, num_edges = 6) {
g <- make_random_connected_graph(num_vertices, num_edges)
for(i in 1:(num_vertices - 2)) {
# Select a random edge.
random_edge <- E(g)[sample(1:length(E(g)), 1)]
from_vertex <- as.numeric(ends(g, random_edge)[[1]])
to_vertex <- as.numeric(ends(g, random_edge)[[2]])
print("to vertex")
print(to_vertex)
edges_to_be_changed <- neighbors(g, as.character(to_vertex))
for (j in 1:length(edges_to_be_changed)) {
g <- g + edge(from_vertex, as.character(edges_to_be_changed[j]))
}
g <- delete.vertices(g, as.character(to_vertex))
g <- simplify(g, remove.multiple = F, remove.loops = T)
plot(g)
# mapping <- seq(1, length(V(g)))
# mapping[to_vertex] <- mapping[from_vertex]
# g <- contract(g, mapping, vertex.attr.comb = "first")
# #g <- delete.vertices(g, which(degree(g) == 0))
# g <- delete.vertices(g, to_vertex)
# g <- simplify(g, remove.multiple = F, remove.loops = T)
# plot(g)
# print(g)
}
}
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut <- function(num_vertices = 4, num_edges = 6) {
g <- make_random_connected_graph(num_vertices, num_edges)
for(i in 1:(num_vertices - 2)) {
# Select a random edge.
random_edge <- E(g)[sample(1:length(E(g)), 1)]
from_vertex <- as.numeric(ends(g, random_edge)[[1]])
to_vertex <- as.numeric(ends(g, random_edge)[[2]])
print("to vertex")
print(to_vertex)
edges_to_be_changed <- neighbors(g, as.character(to_vertex))
for (j in 1:length(edges_to_be_changed)) {
g <- g + edge(from_vertex, edges_to_be_changed[j])
}
g <- delete.vertices(g, as.character(to_vertex))
g <- simplify(g, remove.multiple = F, remove.loops = T)
plot(g)
# mapping <- seq(1, length(V(g)))
# mapping[to_vertex] <- mapping[from_vertex]
# g <- contract(g, mapping, vertex.attr.comb = "first")
# #g <- delete.vertices(g, which(degree(g) == 0))
# g <- delete.vertices(g, to_vertex)
# g <- simplify(g, remove.multiple = F, remove.loops = T)
# plot(g)
# print(g)
}
}
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut <- function(num_vertices = 4, num_edges = 6) {
g <- make_random_connected_graph(num_vertices, num_edges)
for(i in 1:(num_vertices - 2)) {
# Select a random edge.
random_edge <- E(g)[sample(1:length(E(g)), 1)]
from_vertex <- as.numeric(ends(g, random_edge)[[1]])
to_vertex <- as.numeric(ends(g, random_edge)[[2]])
print("to vertex")
print(to_vertex)
edges_to_be_changed <- neighbors(g, as.character(to_vertex))
for (j in 1:length(edges_to_be_changed)) {
g <- g + edge(as.character(from_vertex), edges_to_be_changed[j])
}
g <- delete.vertices(g, as.character(to_vertex))
g <- simplify(g, remove.multiple = F, remove.loops = T)
plot(g)
# mapping <- seq(1, length(V(g)))
# mapping[to_vertex] <- mapping[from_vertex]
# g <- contract(g, mapping, vertex.attr.comb = "first")
# #g <- delete.vertices(g, which(degree(g) == 0))
# g <- delete.vertices(g, to_vertex)
# g <- simplify(g, remove.multiple = F, remove.loops = T)
# plot(g)
# print(g)
}
}
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
karger_random_min_cut(10, 20)
num_edges = 10
num_edges = 8
num_vertices = 5
g <- make_random_connected_graph(num_vertices, num_edges)
random_edge <- E(g)[sample(1:length(E(g)), 1)]
from_vertex <- as.numeric(ends(g, random_edge)[[1]])
to_vertex <- as.numeric(ends(g, random_edge)[[2]])
edges_to_be_changed <- neighbors(g, as.character(to_vertex))
library(igraph)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\albyr\\OneDrive\\Documenti\\ULB\\First Year\\Data Structures and Algorithms\\Assigments\\Assignment 1 - Karger's Algorithm")
# Generate a random connected graph with given number of vertices and edges.
make_random_connected_graph <- function(num_vertices = 10, num_edges = 20, details = T) {
g <- make_empty_graph(directed = F)
g <- g + vertex("1")
# Add a new vertex, connect it to a random existing vertex.
# Repeat the process num_vertices times.
for(i in 2:num_vertices) {
random_vertex <- V(g)[sample(1:length(V(g)), 1)]
g <- g + vertex(as.character(i))
g <- g + edge(i, random_vertex)
}
# Add the remaining num_edges - num_vertices edges.
for(j in 1:(num_edges - num_vertices + 1)) {
# Select two random, distinct vertices.
random_vertices <- V(g)[sample(1:length(V(g)), 2, replace = F)]
g <- g + edge(random_vertices[1], random_vertices[2])
}
if(details) {
plot(g)
print(g)
}
return(g)
}
# Given a graph, compute the min_cut with Karger's algorithm.
# "plot_graphs" and "plot_intermediate_graphs" control the verbosity of the output,
# and are used for debugging
karger_random_min_cut <- function(g, plot_graphs = T, plot_intermediate_graphs = F) {
if(plot_graphs) {
plot(g)
print(g)
}
num_vertices = length(V(g))
for(i in 1:(num_vertices - 2)) {
# Select a random edge, and keep its endpoints.
random_edge <- E(g)[sample(1:length(E(g)), 1)]
from_vertex <- ends(g, random_edge)[[1]]
to_vertex <- ends(g, random_edge)[[2]]
# Contract the selected edge.
edges_to_be_changed <- neighbors(g, to_vertex)
for (j in 1:length(edges_to_be_changed)) {
g <- g + edge(from_vertex, V(g)[edges_to_be_changed[j]]$name)
}
g <- delete.vertices(g, to_vertex)
g <- simplify(g, remove.multiple = F, remove.loops = T)
if (plot_intermediate_graphs) {
plot(g)
}
}
if(plot_graphs) {
plot(g)
print(g)
}
# Return the number of edges, as our randomized min_cut
return(length(E(g)))
}
disc <- F
while (!disc) {
g <- sample_gnm(100, 1000)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gvn(50, 200)
g <- g1 %u% g2
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %u% g2
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %u% g2
plot(g)
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
?min_cut
?is.connected
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
disc <- F
while (!disc) {
g1 <- sample_gnm(50, 200)
g2 <- sample_gnm(50, 200)
g <- g1 %du% g2
plot(g)
if (min_cut(g) == 0) {
disc = T
res <- karger_random_min_cut(g)
if (res == 0) {
print("success")
}
else {
print("XXX")
}
}
else {
print("connected")
}
}
results <- read.csv("Results/karger_incr_vertices_edges_tot.csv", header = T, sep = " ")
grouped_data <- results  %>% group_by(num_vertices, num_edges) %>% summarise_each(funs(mean(.)), -iteration)
library(igraph)
library(dplyr)
library(ggplot2)
library(microbenchmark)
setwd("C:\\Users\\albyr\\Documenti\\data_structures_and_algorithms\\Assignment 1 - Karger's Algorithm")
source("Karger's Algorithm.R")
library(igraph)
library(dplyr)
library(ggplot2)
library(microbenchmark)
setwd("C:\Users\albyr\Documents\data_structures_and_algorithms\Assignment 1 - Karger's Algorithm")
source("Karger's Algorithm.R")
library(igraph)
library(dplyr)
library(ggplot2)
library(microbenchmark)
setwd("C:\\Users\\albyr\\Documents\\data_structures_and_algorithms\\Assignment 1 - Karger's Algorithm")
source("Karger's Algorithm.R")
setwd("C:\\Users\\albyr\\Documents\\data_structures_and_algorithms\\Assignment 1 - Karger's Algorithm")
source("Karger's Algorithm.R")
source("Karger's Algorithm.R")
results <- read.csv("Results/karger_incr_vertices_edges_tot.csv", header = T, sep = " ")
grouped_data <- results  %>% group_by(num_vertices, num_edges) %>% summarise_each(funs(mean(.)), -iteration)
View(grouped_data)
results <- read.csv("Results/karger_incr_edges_total.csv", header = T, sep = " ")
grouped_data <- results  %>% group_by(num_vertices, num_edges) %>% summarise_each(funs(mean(.)), -iteration)
View(grouped_data)
results <- read.csv("Results/karger_incr_vertices_edges_tot.csv", header = T, sep = " ")
grouped_data <- filter(results, time != 0, time < 10^11)  %>% group_by(num_vertices, num_edges) %>% summarise_each(funs(mean(.)), -iteration)
View(grouped_data)
results <- read.csv("Results/karger_incr_edges_total.csv", header = T, sep = " ")
grouped_data <- filter(results, time != 0, time < 10^11)  %>% group_by(num_vertices, num_edges) %>% summarise_each(funs(mean(.)), -iteration)
View(grouped_data)
min_num_nodes = 1000
max_num_nodes = 1000
step = 10
edge_amplification = 4
results = data.frame(num_vertices = numeric(0), num_edges = numeric(0), iteration = numeric(0), correct = logical(0), time = numeric(0))
file_name <- write_with_name_and_date(results, "karkger_incr_vertices_edges", append = F)
for (num_vert_i in seq(min_num_nodes, max_num_nodes, by = step)) {
results = data.frame(num_vertices = numeric(0), num_edges = numeric(0), iteration = numeric(0), correct = logical(0), time = numeric(0))
g <- make_random_connected_graph(num_vert_i, edge_amplification * num_vert_i, details = F)
real_min_cut <- min_cut(g)
num_iterations <- 50
correct_results <- 0
for(iteration_i in 1:num_iterations) {
temp_res <- -1
exec_time <- microbenchmark(
temp_res <- karger_random_min_cut(g, F, F),
times = 1,
unit = "ms"
)
if (temp_res == real_min_cut) {
correct_results <- correct_results + 1
}
# Store the result in the data frame
temp_row <-  c(num_vert_i, edge_amplification * num_vert_i, iteration_i, real_min_cut == temp_res, exec_time$time)
print(temp_row)
results <- rbind(results, temp_row)
}
write.table(file = file_name, x = results, append = T, row.names = F, col.names = F, sep = " ")
}
