table_no_ver <- filter(table, table$importo < 0)
View(table_no_ver)
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
table_no_ver <- filter(table, table$importo < 0)
p <- ggplot(data=table, aes(data, cumsum(importo))) + geom_line(size = 1, col="#004d80") + theme_economist()
p
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
table <- filter(table, table$importo < 0)
p <- ggplot(data=table, aes(data, cumsum(importo))) + geom_line(size = 1, col="#004d80") + theme_economist()
p
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
cumsum(table$importo)
cumsum(filter(table, months(table$data == "settembre"))$importo)
cumsum(filter(table, months(table$data) == "settembre")$importo)
cumsum(table$importo)
sum(table$importo)
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
sum(table$importo)
current_sum <- 189,43
sum(table$importo) + current_sum
current_sum <- 189.43
sum(table$importo) + current_sum
current_sum - sum(table$importo)
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
table <- filter(table, table$importo < 0)
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale)) + geom_line(size = 1, col="#004d80") + theme_economist()
p
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
#table <- filter(table, table$importo < 0)
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale)) + geom_line(size = 1, col="#004d80") + theme_economist()
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale)) + geom_line(size = 1, col="#004d80") + theme_economist()
p <- p + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
#q <- q + geom_line(size = 1, color = "#ff4d4d", aes(x=data, y=cumsum(importo) + saldo_iniziale) + geom_point(size = 2.5, color ="#800000", aes(x=data, y=cumsum(importo) + saldo_iniziale))
p <- p + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
#q <- q + geom_line(size = 1, color = "#ff4d4d", aes(x=data, y=cumsum(importo) + saldo_iniziale) + geom_point(size = 2.5, color ="#800000", aes(x=data, y=cumsum(importo) + saldo_iniziale))
p <- p + ylab("saldo") + theme_fivethirtyeight()
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
#q <- q + geom_line(size = 1, color = "#ff4d4d", aes(x=data, y=cumsum(importo) + saldo_iniziale) + geom_point(size = 2.5, color ="#800000", aes(x=data, y=cumsum(importo) + saldo_iniziale))
p <- p + ylab("saldo") + theme_gdocs()
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
#q <- q + geom_line(size = 1, color = "#ff4d4d", aes(x=data, y=cumsum(importo) + saldo_iniziale) + geom_point(size = 2.5, color ="#800000", aes(x=data, y=cumsum(importo) + saldo_iniziale))
p <- p + ylab("saldo") + theme_wsj()
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#ff4d4d") + geom_point(size = 2.5, color ="#800000")
#q <- q + geom_line(size = 1, color = "#ff4d4d", aes(x=data, y=cumsum(importo) + saldo_iniziale) + geom_point(size = 2.5, color ="#800000", aes(x=data, y=cumsum(importo) + saldo_iniziale))
p <- p + ylab("saldo") + theme_wsj()
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#ff4d4d") + geom_point(size = 2.5, color ="#800000")
p <- p + theme_wsj() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#ff4d4d") + geom_point(size = 2.5, color ="#800000")
p <- p + theme_solarized() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1, color = "#ff4d4d") + geom_point(size = 2.5, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#ff4d4d") + geom_point(size = 2.5, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#ff4d4d") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e06647") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#fc7350") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e85a55") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
table <- filter(table, table$importo < 0)
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
table <- filter(table, table$importo < 0)
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
#-----------------------------------------
table <- filter(table, table$importo < 0)
#-----------------------------------------
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
#-----------------------------------------
#table <- filter(table, table$importo < 0)
#-----------------------------------------
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
table$data
table$data$day
days(table$data)
table$data[1]
a = table$data[1]
spese_giorno = table %>% group_by(data) %>% summarise(spesa_giornaliera = sum(importo))
View(spese_giorno)
View(data)
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
#-----------------------------------------
table <- filter(table, table$importo < 0)
#-----------------------------------------
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
spese_giorno = table %>% group_by(data) %>% summarise(spesa_giornaliera = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
weekdays(table$data)
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
colnames(spese_mese)[1] <- "mese"
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
spese_giorno = table %>% group_by(data) %>% summarise(spesa_giornaliera = sum(importo))
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
View(spesa_per_giorno_settimana)
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
spesa_per_giorno_settimana <- spesa_per_giorno_settimana[order(spesa_per_giorno_settimana$giorno_settimana), ]
View(spesa_per_giorno_settimana)
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
spesa_per_giorno_settimana$giorno_settimana <- factor(spesa_per_giorno_settimana$giorno_settimana, levels= c("Lunedì",
"Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato", "Domenica"))
spesa_per_giorno_settimana <- spesa_per_giorno_settimana[order(spesa_per_giorno_settimana$giorno_settimana), ]
View(spesa_per_giorno_settimana)
# SPESE PER GIORNO DELLA SETTIMANA
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
View(spesa_per_giorno_settimana)
# SPESE PER GIORNO DELLA SETTIMANA
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
spesa_per_giorno_settimana$giorno_settimana <- factor(spesa_per_giorno_settimana$giorno_settimana, levels= c("lunedì",
"martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"))
spesa_per_giorno_settimana <- spesa_per_giorno_settimana[order(spesa_per_giorno_settimana$giorno_settimana), ]
View(spesa_per_giorno_settimana)
# SPESE PER GIORNO DELLA SETTIMANA
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
# SPESE PER GIORNO DELLA SETTIMANA
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
spesa_per_giorno_settimana$giorno_settimana <- factor(spesa_per_giorno_settimana$giorno_settimana, levels= c("lunedì",
"martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"))
spesa_per_giorno_settimana <- spesa_per_giorno_settimana[order(spesa_per_giorno_settimana$giorno_settimana), ]
View(spesa_per_giorno_settimana)
View(spese_giorno)
View(spese_mese)
View(spese_settimana)
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
#-----------------------------------------
table <- filter(table, table$importo < 0)
#-----------------------------------------
#-----------------------------------------
# TABELLE RIASSUNTIVE --------------------
#-----------------------------------------
# SPESE PER MESE
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
colnames(spese_mese)[1] <- "mese"
# SPESE PER NUMERO DI SETTIMANA
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
# SPESE PER GIORNO
spese_giorno = table %>% group_by(data) %>% summarise(spesa_giornaliera = sum(importo))
# SPESE PER GIORNO DELLA SETTIMANA
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
spesa_per_giorno_settimana$giorno_settimana <- factor(spesa_per_giorno_settimana$giorno_settimana, levels= c("lunedì",
"martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"))
spesa_per_giorno_settimana <- spesa_per_giorno_settimana[order(spesa_per_giorno_settimana$giorno_settimana), ]
#-----------------------------------------
# GRAFICI --------------------------------
#-----------------------------------------
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
library("ggplot2")
library("dplyr")
library("sqldf")
library(ggthemes) # visualization
table <- read.csv("C:/Users/albyr/Downloads/listamovimenti.CSV", sep = ";", header = T)
table <- data.frame(data = as.Date(table$Valuta, format="%d/%m/%Y"), importo = as.numeric(gsub(",", ".", as.character(table$Importo))))
table <- table[order(table$data), ]
# AGGIUNGI UN PUNTO DI PARTENZA:
# VALORE ATTUALE SUL CONTO
current_sum <- 189.43
# AGGIUNGI LE SPESE DALL'INIZIO DEL PERIODO A OGGI ALLA SOMMA ATTUALE,
# OTTIENI IL SALDO ALL'INIZIO DEL PERIODO
saldo_iniziale <- current_sum - sum(table$importo)
# RIMUOVI QUESTA LINEA PER CONSIDERARE ANCHE I VERSAMENTI DI DENARO SUL CONTO
#-----------------------------------------
#table <- filter(table, table$importo < 0)
#-----------------------------------------
#-----------------------------------------
# TABELLE RIASSUNTIVE --------------------
#-----------------------------------------
# SPESE PER MESE
spese_mese = table %>%
group_by(months(data)) %>%
summarise(spesa_mensile = sum(importo))
colnames(spese_mese)[1] <- "mese"
# SPESE PER NUMERO DI SETTIMANA
spese_settimana = table %>%
group_by(strftime(table$data,format="%W")) %>%
summarise(spesa_settimanale = sum(importo))
colnames(spese_settimana)[1] <- "numero_settimana"
# SPESE PER GIORNO
spese_giorno = table %>% group_by(data) %>% summarise(spesa_giornaliera = sum(importo))
# SPESE PER GIORNO DELLA SETTIMANA
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
spesa_per_giorno_settimana$giorno_settimana <- factor(spesa_per_giorno_settimana$giorno_settimana, levels= c("lunedì",
"martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"))
spesa_per_giorno_settimana <- spesa_per_giorno_settimana[order(spesa_per_giorno_settimana$giorno_settimana), ]
#-----------------------------------------
# GRAFICI --------------------------------
#-----------------------------------------
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
a = matrix(c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0), nrow = 5)
b = matrix(c(1,0,1,0,1,0,1,0,1), nrow = 3)
a
a = matrix(c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0), nrow = 5, by.row =T)
b = matrix(c(1,0,1,0,1,0,1,0,1), nrow = 3, by.row = T)
a = matrix(c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0), nrow = 5, byrow =T)
b = matrix(c(1,0,1,0,1,0,1,0,1), nrow = 3, byrow = T)
a
b
x = -100..100
x = seq(-100,100)
plot(3*x + 2)
plot(3*(x-2) + 2)
plot(3*(x+2) + 2)
plot(3*(x-3/2) + 2)
plot(3*(x-2/3) + 2)
plot(3*(x+2/3) + 2)
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= rank - vector_size/2, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Size of the vector: 100000; Size of each step: 123")), ""))))
p
library(igraph)
library(dplyr)
library(ggplot2)
library(microbenchmark)
library(scales)
setwd("C:\\Users\\albyr\\Documents\\data_structures_and_algorithms\\Assignment 2 - Quickselect/")
results_size <- read.csv("quickselect/Results/increasing_n_972354100.csv", header = T, sep = ",")
results_rank <- read.csv("quickselect/Results/increasing_rank_214438400.csv", header = T, sep = ",")
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= rank - vector_size/2, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Size of the vector: 100000; Size of each step: 123")), ""))))
p
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= rank - vector_size/2, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank- vector_size/2, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Size of the vector: 100000; Size of each step: 123")), ""))))
p
# NUMBER OF COMPARISONS
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= rank + vector_size/2, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank + vector_size/2, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Size of the vector: 100000; Size of each step: 123")), ""))))
p
