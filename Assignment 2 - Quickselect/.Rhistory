# SPESE PER GIORNO DELLA SETTIMANA
spesa_per_giorno_settimana = table %>%
group_by(weekdays(data)) %>%
summarise(spesa_per_giorno_settimana = sum(importo))
colnames(spesa_per_giorno_settimana)[1] <- "giorno_settimana"
spesa_per_giorno_settimana$giorno_settimana <- factor(spesa_per_giorno_settimana$giorno_settimana, levels= c("lunedì",
"martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"))
spesa_per_giorno_settimana <- spesa_per_giorno_settimana[order(spesa_per_giorno_settimana$giorno_settimana), ]
#-----------------------------------------
# GRAFICI --------------------------------
#-----------------------------------------
p <- ggplot(data=table, aes(data, cumsum(importo) + saldo_iniziale))
p <- p + geom_line(size = 1.2, color = "#e86a66") + geom_point(size = 2.8, color ="#800000")
p <- p + theme_solarized_2() + ylab("saldo")
p
a = matrix(c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0), nrow = 5)
b = matrix(c(1,0,1,0,1,0,1,0,1), nrow = 3)
a
a = matrix(c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0), nrow = 5, by.row =T)
b = matrix(c(1,0,1,0,1,0,1,0,1), nrow = 3, by.row = T)
a = matrix(c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0), nrow = 5, byrow =T)
b = matrix(c(1,0,1,0,1,0,1,0,1), nrow = 3, byrow = T)
a
b
range(0, 99999, 100)
range(0, 99999, by=100)
?range
seq(0, 99999, by=100)
seq(0, 99999, by=99)
seq(0, 99999, size.out = 1000)
seq(0, 99999, size.out = 100)
seq(0, 99999, length.out = 100)
seq(0, 99999, by = 33)
seq(0, 99999, by = 3)
seq(0, 99999, by = 30)
seq(0, 99999, by = 33)
seq(0, 99999, by = 123)
ln(100000/99999)
log(100000/99999)
log(100000)
100000 * log ( 1 / 100000)
100000 * log (100000)
e
E
exp
?
exp
th <- function(n, k) {
2*n + 2*n*log(n/(n-k)) + 2*k*log((n-k)/n)
}
th(1000, 0)
th(1000, 1)
th(1000, 1000)
th(1000, 999)
library(igraph)
library(dplyr)
library(ggplot2)
library(microbenchmark)
setwd("C:\\Users\\albyr\\Documents\\data_structures_and_algorithms\\Assignment 2 - Quickselect/")
setwd("C:\\Users\\albyr\\Documents\\data_structures_and_algorithms\\Assignment 2 - Quickselect/")
size <- read.csv("quickselect/Results/increasing_n_717224000.csv", header = T, sep = ",")
results_rank <- read.csv("quickselect/Results/increasing_rank_272314000.csv", header = T, sep = ",")
View(size)
grouped_data_size <- results  %>% group_by(Vector_size, num_edges) %>% summarise_each(funs(mean(.)), -iteration)
grouped_data_size <- results_size  %>% group_by(Vector_size, num_edges) %>% summarise_each(funs(mean(.)), -iteration)
grouped_data_size <- results_size  %>% group_by(Vector_size) %>% summarise_each(funs(mean(.)), -iteration_number)
results_size <- read.csv("quickselect/Results/increasing_n_717224000.csv", header = T, sep = ",")
rm(size)
grouped_data_size <- results_size  %>% group_by(Vector_size) %>% summarise_each(funs(mean(.)), -iteration_number)
View(results_size)
grouped_data_size <- results_size  %>% group_by(vector_size) %>% summarise_each(funs(mean(.)), -iteration_number)
View(grouped_data_size)
View(results_size)
View(grouped_data_size)
results_size <- read.csv("quickselect/Results/increasing_n_972354100.csv.csv", header = T, sep = ",")
results_size <- read.csv("quickselect/Results/increasing_n_972354100.csv", header = T, sep = ",")
grouped_data_size <- results_size  %>% group_by(vector_size) %>% summarise_each(funs(mean(.)), -iteration_number)
View(grouped_data_size)
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14))
p <- p + scale_x_discrete(limits = grouped_data_size$vector_size, expand = 0.05)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2")), ""))))
#theoretical_results <- data.frame(num_vertices = grouped_data_size$num_vertices, baseline = 2 / (grouped_data_size$num_vertices * (grouped_data_size$num_vertices - 1)))
#p <- p + geom_line(data = theoretical_results, size = 1, color = "#ff4d4d", aes(x = num_vertices, y = baseline)) + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
#p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14))
p <- p + scale_x_discrete(limits = grouped_data_size$vector_size, expand = 0.05)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2")), ""))))
#theoretical_results <- data.frame(num_vertices = grouped_data_size$num_vertices, baseline = 2 / (grouped_data_size$num_vertices * (grouped_data_size$num_vertices - 1)))
#p <- p + geom_line(data = theoretical_results, size = 1, color = "#ff4d4d", aes(x = num_vertices, y = baseline)) + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_x_discrete(limits = grouped_data_size$vector_size, expand = 0.05)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2")), ""))))
#theoretical_results <- data.frame(num_vertices = grouped_data_size$num_vertices, baseline = 2 / (grouped_data_size$num_vertices * (grouped_data_size$num_vertices - 1)))
#p <- p + geom_line(data = theoretical_results, size = 1, color = "#ff4d4d", aes(x = num_vertices, y = baseline)) + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#p <- p + scale_x_discrete(limits = grouped_data_size$vector_size, expand = 0.05)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2")), ""))))
#theoretical_results <- data.frame(num_vertices = grouped_data_size$num_vertices, baseline = 2 / (grouped_data_size$num_vertices * (grouped_data_size$num_vertices - 1)))
#p <- p + geom_line(data = theoretical_results, size = 1, color = "#ff4d4d", aes(x = num_vertices, y = baseline)) + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#p <- p + scale_x_discrete(limits = grouped_data_size$vector_size, expand = 0.05)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
#theoretical_results <- data.frame(num_vertices = grouped_data_size$num_vertices, baseline = 2 / (grouped_data_size$num_vertices * (grouped_data_size$num_vertices - 1)))
#p <- p + geom_line(data = theoretical_results, size = 1, color = "#ff4d4d", aes(x = num_vertices, y = baseline)) + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p
library(scales)
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#p <- p + scale_x_discrete(limits = grouped_data_size$vector_size, expand = 0.05)
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
#theoretical_results <- data.frame(num_vertices = grouped_data_size$num_vertices, baseline = 2 / (grouped_data_size$num_vertices * (grouped_data_size$num_vertices - 1)))
#p <- p + geom_line(data = theoretical_results, size = 1, color = "#ff4d4d", aes(x = num_vertices, y = baseline)) + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p
10000*(2 + 2 * log(2))
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p <- p + geom_line(size = 1, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 1, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p <- p + geom_line(size = 3, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p <- p + geom_line(size = 1, color = "#4f72fc") #+ geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
grouped_data_rank <- results_rank  %>% group_by(vector_size) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons))# + geom_point(data = theoretical_results, size = 2.5, color ="#800000", aes(x = num_vertices, y = baseline))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons))
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 1, color = "#4f72fc") + geom_point(size = 2, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Sizeof the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2; step_size: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = num_of_comparisons))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Size of the vector: 100000; Size of each step: 123")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons * 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time[usec]))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons * 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec.))
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons * 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
p
# NUMBER
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
#p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = th_num_of_comparisons ), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
p
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
fit$coefficients
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = vector_size * fit$coefficients[2] + fit$coefficients[1]), lineend = "round")
p
fit$coefficients[2]
fit$coefficients[1]
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = 1000 * (vector_size * fit$coefficients[2] + fit$coefficients[1])), lineend = "round")
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = 1000 * (vector_size * fit$coefficients[2] + fit$coefficients[1])), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Rank of the element to be found: vector_size / 2;  Size of each steps: 10000")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = 1000 * (vector_size * fit$coefficients[2] + fit$coefficients[1])), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Slope: 0.0043; Intercept: -29.02")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = 1000 * (vector_size * fit$coefficients[2] + fit$coefficients[1])), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 0.0043, intercept = -29.02")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. * 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = 1000 * (vector_size * fit$coefficients[2] + fit$coefficients[1])), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 4.39, intercept = -29.02")), ""))))
p
# TIME COMPLEXITY
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. / 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = 1000 / (vector_size * fit$coefficients[2] + fit$coefficients[1])), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 4.39, intercept = -29.02")), ""))))
p
# TIME COMPLEXITY
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. / 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = (vector_size * fit$coefficients[2] + fit$coefficients[1])) / 1000, lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 4.39, intercept = -29.02")), ""))))
p
# TIME COMPLEXITY
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. / 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = (vector_size * fit$coefficients[2] + fit$coefficients[1]) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 4.39, intercept = -29.02")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= vector_size, y = time..usec. / 1000))
fit <- lm(time..usec. ~ vector_size, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = vector_size, y = (vector_size * fit$coefficients[2] + fit$coefficients[1]) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 4.39 * 10^-6, intercept = -29.02")), ""))))
p
p <- ggplot(grouped_data_size, aes(x= rank, y = time..usec. / 1000))
fit <- lm(time..usec. ~ rank, data = grouped_data_size)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = (rank * fit$coefficients[2] + fit$coefficients[1]) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 4.39 * 10^-6, intercept = -29.02")), ""))))
p
View(grouped_data_rank)
p <- ggplot(grouped_data_rank, aes(x= rank, y = time..usec. / 1000))
fit <- lm(time..usec. ~ rank, data = grouped_data_rank)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = (rank * fit$coefficients[2] + fit$coefficients[1]) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Size of the vector") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect applied on a vector of increasing size"), atop(italic(.("Linear model: slope = 4.39 * 10^-6, intercept = -29.02")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = time..usec. / 1000))
fit <- lm(time..usec. ~ poly(rank,3), data = grouped_data_rank)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = (rank * fit$coefficients[2] + fit$coefficients[1]) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Regression done with a polynomial model of order 3")), ""))))
p
fit
p <- ggplot(grouped_data_rank, aes(x= rank, y = time..usec. / 1000))
fit <- lm(time..usec. ~ poly(rank,3), data = grouped_data_rank)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = predict(fit, grouped_data_rank$rank) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Regression done with a polynomial model of order 3")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = time..usec. / 1000))
fit <- lm(time..usec. ~ poly(rank,3), data = grouped_data_rank)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = predict(fit, newdata = grouped_data_rank$rank) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Regression done with a polynomial model of order 3")), ""))))
p
# TIME COMPLEXITY
p <- ggplot(grouped_data_rank, aes(x= rank, y = time..usec. / 1000))
fit <- lm(time..usec. ~ poly(rank,3), data = grouped_data_rank)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = predict(fit, newdata = data.frame(rank = grouped_data_rank$rank)) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Regression done with a polynomial model of order 3")), ""))))
p
results_rank <- read.csv("quickselect/Results/increasing_rank_214438400.csv", header = T, sep = ",")
grouped_data_rank <- results_rank  %>% group_by(rank) %>% summarise_each(funs(mean(.)), -iteration_number)
p <- ggplot(grouped_data_rank, aes(x= rank, y = time..usec. / 1000))
fit <- lm(time..usec. ~ poly(rank,3), data = grouped_data_rank)
p <- p + geom_line(size = 3, color = "#ff4d4d", aes(x = rank, y = predict(fit, newdata = data.frame(rank = grouped_data_rank$rank)) / 1000), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1.5, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Time required [msec]")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Regression done with a polynomial model of order 3")), ""))))
p
p <- ggplot(grouped_data_rank, aes(x= rank, y = num_of_comparisons))
p <- p + geom_line(size = 5, color = "#ff4d4d", aes(x = rank, y = th_num_of_comparisons), lineend = "round")
p <- p + geom_line(size = 0.8, color = "#4f72fc") + geom_point(size = 1, color ="#021f91")
p <- p + theme_minimal() + xlab("Rank") + ylab("Number of comparisons")
p <- p + theme(axis.text=element_text(size=12), axis.title=element_text(size=14)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + scale_y_continuous(labels = comma)
p <- p  +  ggtitle(bquote(atop(.("Quickselect, select items of increasing rank"), atop(italic(.("Size of the vector: 100000; Size of each step: 123")), ""))))
p
